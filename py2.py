
# Таблица замены букв
transformation = {
    'а': 'ь', 'б': 'э', 'в': 'ю', 'г': 'я', 'д': 'а', 'е': 'б', 'ё': 'в',
    'ж': 'г', 'з': 'е', 'и': 'ё', 'й': 'ж', 'к': 'з', 'л': 'й', 'м': 'л',
    'н': 'м', 'о': 'н', 'п': 'о', 'р': 'п', 'с': 'р', 'т': 'с', 'у': 'т',
    'ф': 'ф', 'х': 'х', 'ц': 'ц', 'ч': 'ч', 'ш': 'у', 'щ': 'д', 'ъ': 'и',
    'ы': 'к', 'ь': 'ш', 'э': 'щ', 'ю': 'ъ', 'я': 'ы'
}

# Инвертирование таблицы
reverse_transformation = {v: k for k, v in transformation.items()}


def decode_text(encoded_text):
    # Расшифровка текста
    return ''.join(reverse_transformation.get(char, char) for char in encoded_text.lower())


# Закодированное сообщение
encoded_message = "Преобразованный текст: щсн этабс знпнсбмшзнб оёршлн, мн ы опнрсн хнчт, чснэк т сбэы нрсьйнрш чсн-сн нс лбмы ю оёршлбммнл юёаб. хнчт мьоёрьсш юрв, чсн атльъ. хнчт мьоёрьсш юрв, чсн чтюрсютъ. лмб нчбмш мпьюёсры сн, зьз ю онрйбамбб юпблы лк юрв энйшуб ё энйшуб мьхнаёл нэдёж \"знммбзс\", зьз нэь мьхнаёл нэдёб ёмсбпбрк, нрнэбммн мпьюысры мьуё онрёабйзё т сбэы, зняаь лк еьмёльблры чбл-сн мнюбмшзёл, рлнспы фёйшлбц. ь бдв рзьгт н снл, чсн ск рьльы йтчуьы, зсн эк чсн эк мб янюнпёй. р зьгакл пьенл ы юрв энйшуб ё энйшуб нчьпнюкюьърш сюнбж зпьрнснж, ь сьз гб атубюмнж анэпнснж ё сюнёлё цбммнрсылё. щсн ёлбммн сн, чсн еьцбоёйн лбмы сняаь ё сь ёеълёмзь ю сбэб, знснпнж ы юнрхёдьърш он рбж абмш. ы пьа, чсн ск лны абютузь. ы эйьянаьпбм сбэб еь зьгакж опнюбавммкж абмш юлбрсб. ё ы тюбпбм ю снл, чсн хнчт юёабсш сбэы ю рюнвл 2025. йъэйъ сбэы!"

# Расшифровка
decoded_message = decode_text(encoded_message)
print("Расшифрованное сообщение:", decoded_message)
